// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const getArtist = `-- name: GetArtist :one
SELECT
  id, user_id, followers
FROM artists
WHERE
  id = $1
`

func (q *Queries) GetArtist(ctx context.Context, id uuid.UUID) (Artist, error) {
	row := q.db.QueryRow(ctx, getArtist, id)
	var i Artist
	err := row.Scan(&i.ID, &i.UserID, &i.Followers)
	return i, err
}

const getArtists = `-- name: GetArtists :many
SELECT id, user_id, followers FROM artists
`

func (q *Queries) GetArtists(ctx context.Context) ([]Artist, error) {
	rows, err := q.db.Query(ctx, getArtists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artist
	for rows.Next() {
		var i Artist
		if err := rows.Scan(&i.ID, &i.UserID, &i.Followers); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
  id, name, email, password
FROM users
WHERE
  id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserArtistData = `-- name: GetUserArtistData :one
SELECT
  id, user_id, followers
FROM artists
WHERE
  user_id = $1
`

func (q *Queries) GetUserArtistData(ctx context.Context, userID uuid.UUID) (Artist, error) {
	row := q.db.QueryRow(ctx, getUserArtistData, userID)
	var i Artist
	err := row.Scan(&i.ID, &i.UserID, &i.Followers)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, email, password FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertArtist = `-- name: InsertArtist :one
INSERT INTO artists
  ( "id", "user_id" ) VALUES
  ( $1, $2 )
RETURNING "id"
`

type InsertArtistParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) InsertArtist(ctx context.Context, arg InsertArtistParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertArtist, arg.ID, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users
  ( "id", "name", "email", "password" ) VALUES
  ( $1, $2, $3, $4 )
RETURNING "id"
`

type InsertUserParams struct {
	ID       uuid.UUID
	Name     string
	Email    string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
